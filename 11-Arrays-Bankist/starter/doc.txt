btnLogin.addEventListener() :
Allows the user to entry into the application once its informed correctly the username and pin.
the .find will set into the currentAccount variable the object that is the same as acc.owner informed by the user .
Once into the app we will change the UI informations according the currentAccount values.

e.preventDefault() only has the function of canceling the page reload after submitting a form
inputLoginPin.blur(); will remove the focus into the pin form place ************

btnTransfer.addEventListener() :
We create 2 variables, amount and receiverAcc which will store the amount and acc that will be transferred for some bucks.
Using if statement we check if amount is greater than 0 (amount > 0 &&), if there is an account that is mentioned by the user (receiverAcc &&), if currentAccount.balance >= amount && and receiverAcc?.username !== currentAccount.username (different) 

after checking we add the movements into the array and update the UI.

btnLoan.addEventListener() : 
Check if the loan amount is greater than 0 and at least have 1 deposit that represents 10% of the loan.
After checking displays the UI.

btnClose.addEventListener() :
This is the place were we close accounts by deleting them from the accounts array. To do it we catch the input value of username and pin (it has to be of currentAccount), them we store into index variable the index of the username that we want to delete, after that we use splice(index, 1) to delete this account from accounts array and set the opacity back to 0 (hiding the app UI)

btnSort.addEventListener() :
Create a variable to manage the current status of sorted and once this button is clicked it will send to display the currentAccount.movements and the !sorted.
!sorted(true) -> if sort is equal true then we will send this to displayMovements() and the list containing all movements will no longer be organized by value.
!sorted(false) -> (default) if sort is equal false then we will send this to displayMovements and will become true organizing the elements.
basically once true and clicked it will become false and unsorted, once false and clicked it will become true and sorted

displayMovements() :
Using the movements__row to implant into html the data of the account1.movements with forEach method.
Here we are basically updating the app with the movements.

---- CHANGE ----
We changed displayMovements() to now accept 2 params, one is sort that by default is false, if true it will sort the whole array and display the sorted one, if false it will only display the movements array without order.

createUsernames() :
We use .map to change the strings of owner in order to create a username into every account array.
We saw what is SIDE EFFECT that represents some kind of action or function that don't return anything just change the actual code.

calcDisplayBalance() :
We use .reduce method on the movements array in order to display into the labelBalance (html part) the total balance of the entire movements array

calcDisplaySummary() :
With .filter and .reduce we catch up all deposits and withdrawals of the selected movements array of the selected account, after catching the deposit and withdrawals we display them into the HTML.
We also display the interest tax which effects all deposits, to adquire this tax we use a filter to catch every deposit then we map through the array changing the values to the ones multiplied by the interest of 1.2.
After we have the correct value into the array we use a .filter to bring out every value with is above 1 to finally sum all values using .reduce and then finally displaying into labelSumInterest HTML element.